import asyncio

from sqlalchemy.dialects.postgresql import asyncpg

from config import settings
from db_handler.db_funk import execute_raw_sql



async def add_student_to_schedule(student_name: str, schedule_id: int) -> tuple[bool, str]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏

    Args:
        student_name: –ò–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (–ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        schedule_id: ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

    Returns:
        –ö–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—Ö: bool, —Å–æ–æ–±—â–µ–Ω–∏–µ: str)
    """
    try:
        # 1. –ù–∞—Ö–æ–¥–∏–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_query = f"""
        SELECT id FROM big_db.student 
        WHERE name like '%{student_name}%';
        """
        student_data = await execute_raw_sql(student_query)
        if not student_data:
            return False, f"–°—Ç—É–¥–µ–Ω—Ç '{student_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"

        student_id = student_data[0]['id']
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏
        check_query = f"""
        SELECT 1 FROM big_db.student_schedule
        WHERE student = {student_id} AND schedule = {schedule_id};
        """
        exists = await execute_raw_sql(check_query)
        if len(exists) != 0:
            print("–°—Ç—É–¥–µ–Ω—Ç —É–∂–µ –≤ —ç—Ç–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
            return False, "–°—Ç—É–¥–µ–Ω—Ç —É–∂–µ –≤ —ç—Ç–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"

        # 3. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        print("  # 3. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å")
        insert_query = f"""
        INSERT INTO big_db.student_schedule (student, schedule)
        VALUES ({student_id}, {schedule_id});
        """

        await execute_raw_sql(insert_query)

        return True, f"–°—Ç—É–¥–µ–Ω—Ç {student_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {schedule_id}"

    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"


a1 = '''121. üü¶–≠–ø—Ä–∏–∫–æ–≤ –°. 2009
122. üü¶–¢–∏–±–∏–ª–∞—à–≤–∏–ª–∏ –ö. 2010
123. üü¶–ì–æ–Ω—á–∞—Ä–æ–≤–∞ –ö. 2010
124. üü¶–ï–∫–∞—Ç–µ—Ä–∏–Ω—á–µ–≤ –ê. 2010
125. üü¶–ê—Ä—Ö–∏–ø–æ–≤ –í. 2013
126. üü¶–£–≤–∞—Ä–æ–≤–∞ –ê. 2012
127. üü¶–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ï. 2012
128. üü¶–ú–∞—Å–ª–æ–≤ –ï. 2012
129. üü¶–ö–∏–ª–∏–Ω –ú. 2012
130. üü¶–ö–æ–∑–ª–æ–≤ –ò. 2010
131. üü¶–î–∞–≤–∏–¥–æ–≤–∞ –ï. 2012
132. üü¶–ì–∞—Ä–∫—É—à–∞ –ö. 2011
133. üü©–ë–æ—á–∞—Ä–æ–≤ –°. 2014
134. üüß–®–∞—Ç–æ—Ö–∏–Ω –†. 2013
135. üüß–°–æ–ª–æ–Ω—á–µ–≤ –†. 2011
136. üüß–í–∞—Ä—à–∞–Ω–∏–¥–∑–µ –ê. 2010
137. üüß–¶—ã–≥–∞–Ω–µ—à –ì. 2013
142. üü®–ö–∞–ø—É—Å—Ç–∏–Ω 2008
143. ‚¨ú–ë–µ—Ä–µ–∑–æ–≤—Å–∫–∞—è –ö. 2008
144. ‚¨ú–ï—Ä–µ—Å—å–∫–æ –õ. 2009
145. ‚¨ú–ê–Ω—Ç–æ–Ω–µ–Ω–∫–æ –ê. 2009
146. üü¶–ì–∞–π–¥—É–∫–æ–≤ –î. 2010
147. ‚¨ú–ü–µ—Å—Ç–µ—Ä–µ–≤ –ï. 2010
148. üüß–ï–º–µ–ª—å—è–Ω–æ–≤ –ë. 2013
149. üü¶–§–µ–¥–æ—Ä–æ–≤ –ú. 2009
150. üü¶–ü–∞—Ä—Ö–æ–º–µ–Ω–∫–æ –ê. 2010
151. üü¶–ê–Ω–∫—É–¥–∏–Ω–æ–≤ –ò. 2011
152. üü¶–•–∞–Ω—á—É–∫–∞–µ–≤ –†. 2012
153. üü¶–ú–∏—Ö–∞–π–ª–æ–≤–∞ –°. 2012
154. üü©–ü–æ–Ω–æ–º–∞—Ä–µ–Ω–∫–æ –í. 2014
155. üüß–ò—Å–∞—Ö–∞–Ω—è–Ω –°. 2010
156. üü®–†—É—Å–∞–Ω–æ–≤ –†. 2012
157. ‚¨ú–°–∞–µ–Ω–∫–æ –í. 2009
158. ‚¨ú–©–∞–±–ª–µ–≤—Å–∫–∏–π –ú. 2007
159. üü®–°–∞—Ä–≥—Å—è–Ω –†. 2007
160. ‚¨ú–ú–∞–ª—ã–π –ë. 2014
161. üü®–ù–∏–∫—É–ª–∏–Ω–∞ –ï. 2011'''

a = """–ì—É—Å–µ–π–Ω–æ–≤ –°—É–±—Ö–∞–Ω
–ì—É—Å–µ–π–Ω–æ–≤ –°—É–ª–µ–π–º–∞–Ω
–ß–µ—Ä–Ω—ã—à–µ–≤ –ö
–ß–µ—Ä–Ω—ã—à–µ–≤ –î
"""
s_list = []


# for name in a1.split('\n'):
#     s_list.append(name.split(' ')[1].replace('‚¨ú', '').replace('üü®', '').replace('üüß', '').replace('üü©', '').replace('üü¶', ''))

for name in a.split('\n'):
    s_list.append(name)
print(s_list)




async def main():


    for name in s_list:
        print(f"–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞...{name}")
        result = await add_student_to_schedule(name, 20) #32 33
        # result = await add_new_student(name)  # 22 23

        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

if __name__ == "__main__":
    asyncio.run(main())

