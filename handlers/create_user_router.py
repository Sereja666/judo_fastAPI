import pytz
from aiogram import Router, F, types
from aiogram.filters import CommandStart, CommandObject, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from create_bot import bot
from database.schemas import schema

from db_handler.db_funk import get_user_data, insert_user, execute_raw_sql
from keyboards.kbs import main_kb, home_page_kb, places_kb
from utils.utils import get_refer_id, get_now_time, get_current_week_day
from aiogram.utils.chat_action import ChatActionSender
import logging
from datetime import datetime, time

logging.basicConfig(level=logging.ERROR)

create_user_router = Router()

universe_text = ('–ß—Ç–æ–± –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π '
                 '–∫–æ–º–∞–Ω–¥–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –º–µ–Ω—é.')



@create_user_router.message(F.text == "ü•ã –ù–æ–≤—ã–π —É—á–µ–Ω–∏–∫")
async def add_new_student(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    user_permission = await execute_raw_sql(
        f"SELECT permissions FROM {schema}.telegram_user WHERE telegram_id = {message.from_user.id};"
    )

    if not user_permission or user_permission[0]['permissions'] not in (1, 2, 99):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤")
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–§–ò–û; –î–î.–ú–ú.–ì–ì–ì–ì; ID –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã; —Ç–µ–ª–µ—Ñ–æ–Ω\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤–∏—á; 15.05.2010; 3; +79161234567",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )


class StudentStates(StatesGroup):
    waiting_for_schedule_source = State()


@create_user_router.message(F.text.regexp(r'^[^;]+;[^;]+;[^;]+;[^;]+$'))
async def process_student_data(message: Message, state: FSMContext):
    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        parts = [part.strip() for part in message.text.split(';')]
        if len(parts) != 4:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

        name, birthday, discipline_id, phone = parts

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        birthday_date = datetime.strptime(birthday, "%d.%m.%Y").date()
        if not discipline_id.isdigit():
            raise ValueError("ID –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        result = await execute_raw_sql(
            f"""INSERT INTO {schema}.student (
                name, birthday, sport_discipline, telephone, date_start
            ) VALUES (
                '{name}',
                '{birthday_date}',
                {int(discipline_id)},
                '{phone}',
                CURRENT_DATE
            ) RETURNING id;"""
        )

        new_student_id = result[0]['id']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(new_student_id=new_student_id)

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        await message.answer(
            f"‚úÖ –£—á–µ–Ω–∏–∫ {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω (ID: {new_student_id})\n\n"
            "–•–æ—Ç–∏—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞?\n"
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å, –∏–ª–∏ '–Ω–µ—Ç' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ù–µ—Ç")]],
                resize_keyboard=True
            )
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.set_state(StudentStates.waiting_for_schedule_source)

    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
        print(f"Error saving student: {str(e)}")
        await state.clear()


@create_user_router.message(StudentStates.waiting_for_schedule_source, F.text)
async def process_schedule_copy(message: Message, state: FSMContext):
    if message.text.lower() == '–Ω–µ—Ç':
        await message.answer(
            "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ",
            reply_markup=main_kb(message.from_user.id)
        )
        await state.clear()
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        new_student_id = data['new_student_id']

        # –ò—â–µ–º —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        source_student = await execute_raw_sql(
            f"SELECT id FROM {schema}.student WHERE name ILIKE '%{message.text}%' LIMIT 1;"
        )

        if not source_student:
            await message.answer("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–Ω–µ—Ç'")
            return

        source_student_id = source_student[0]['id']

        # –ö–æ–ø–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        await execute_raw_sql(
            f"""
            INSERT INTO {schema}.student_schedule (student, schedule)
            SELECT {new_student_id}, schedule 
            FROM {schema}.student_schedule 
            WHERE student = {source_student_id};
            """
        )

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
        count_result = await execute_raw_sql(
            f"SELECT COUNT(*) FROM {schema}.student_schedule WHERE student = {new_student_id};"
        )
        count = count_result[0]['count']

        await message.answer(
            f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {count} –∑–∞–Ω—è—Ç–∏–π –æ—Ç —É—á–µ–Ω–∏–∫–∞ ID {source_student_id}",
            reply_markup=main_kb(message.from_user.id)
        )

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
        print(f"Error copying schedule: {str(e)}")
    finally:
        await state.clear()


@create_user_router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message):
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_kb(message.from_user.id))