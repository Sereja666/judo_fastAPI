from datetime import date, timedelta, datetime

from aiogram import F, Router
from aiogram.types import Message
from aiogram.utils.chat_action import ChatActionSender
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import re
from create_bot import bot
from db_handler.db_funk import get_user_permissions, process_payment, execute_raw_sql
from keyboards.kbs import home_page_kb, admin_page_kb

admin_router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
class PaymentStates(StatesGroup):
    waiting_for_payment_data = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –±–æ–ª–µ–∑–Ω–∏
class MedicalCertificateStates(StatesGroup):
    waiting_for_certificate_data = State()


@admin_router.message(F.text.endswith('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å'))
async def get_profile(message: Message):
    async with ChatActionSender.typing(bot=bot, chat_id=message.from_user.id):
        admin_text = "—Ç—É—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞"
    await message.answer(admin_text, reply_markup=await admin_page_kb(message.from_user.id))


@admin_router.message(F.text.contains('üí≥ –æ–ø–ª–∞—Ç–∞'))
async def start_payment_process(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_permissions = await get_user_permissions(message.from_user.id)

    if user_permissions not in [99, 2 ]:  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await message.answer(
        "üí≥ –ü—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–§–ò–û –°—É–º–º–∞</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<code>–ê–Ω–æ—Å–æ–≤–∞ –ö–∏—Ä–∞ 3800</code>\n\n"
        "–ò–ª–∏:\n"
        "<code>–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä 5000</code>",
        reply_markup=await home_page_kb(message.from_user.id)
    )
    await state.set_state(PaymentStates.waiting_for_payment_data)


@admin_router.message(PaymentStates.waiting_for_payment_data)
async def process_payment_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–ª–∞—Ç–µ"""
    try:
        input_text = message.text.strip()

        # –†–∞–∑–±–∏—Ä–∞–µ–º –≤–≤–æ–¥ - –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —ç—Ç–æ —Å—É–º–º–∞, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –§–ò–û
        parts = input_text.split()
        if len(parts) < 2:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: <code>–ê–Ω–æ—Å–æ–≤–∞ –ö–∏—Ä–∞ 3800</code>")
            return

        # –°—É–º–º–∞ - –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
        amount_str = parts[-1]
        # –§–ò–û - –≤—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
        student_name = ' '.join(parts[:-1])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—É–º–º–∞ - —á–∏—Å–ª–æ
        try:
            amount = int(amount_str)
        except ValueError:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: <code>–ê–Ω–æ—Å–æ–≤–∞ –ö–∏—Ä–∞ 3800</code>")
            return

        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∏—â–µ–º –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        possible_students = await execute_raw_sql(
            f"""SELECT id, name 
            FROM public.student 
            WHERE active = true 
            AND name ILIKE $1
            LIMIT 5;""",
            f"%{student_name}%"
        )

        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –ø–æ–∫–∞–∂–µ–º –∏—Ö
        if len(possible_students) > 1:
            students_list = "\n".join([f"‚Ä¢ {s['name']}" for s in possible_students])
            await message.answer(
                f"üîç –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{student_name}':\n\n"
                f"{students_list}\n\n"
                f"–£—Ç–æ—á–Ω–∏—Ç–µ –§–ò–û —É—á–µ–Ω–∏–∫–∞:",
                reply_markup=await home_page_kb(message.from_user.id)
            )
            return
        elif len(possible_students) == 0:
            await message.answer(
                f"‚ùå –£—á–µ–Ω–∏–∫ '{student_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –§–ò–û.",
                reply_markup=await home_page_kb(message.from_user.id)
            )
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
        result = await process_payment(student_name, amount)

        if result["success"]:
            response_text = (
                f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!\n\n"
                f"üë§ –£—á–µ–Ω–∏–∫: <b>{result['student_name']}</b>\n"
                f"üí≥ –°—É–º–º–∞: <b>{result['amount']} —Ä—É–±.</b>\n"
                f"üéØ –¢–∞—Ä–∏—Ñ: <b>{result['price_description']}</b>\n"
                f"üì¶ –ó–∞–Ω—è—Ç–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ: <b>{result['classes_added']}</b>\n"
                f"üìä –û—Å—Ç–∞—Ç–æ–∫ –∑–∞–Ω—è—Ç–∏–π: <b>{result['new_balance']}</b>\n"
                f"{result['price_change_info']}\n"
                f"üìÖ –î–∞—Ç–∞: <b>{result['payment_date']}</b>"
            )
        else:
            response_text = f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"

        await message.answer(response_text)
        await state.clear()

    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()


@admin_router.message(F.text.contains('üè• —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ–ª–µ–∑–Ω–∏'))
async def start_medical_certificate_process(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –±–æ–ª–µ–∑–Ω–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_permissions = await get_user_permissions(message.from_user.id)

    if user_permissions not in [99, 2]:  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await message.answer(
        "üè• –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –±–æ–ª–µ–∑–Ω–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–§–ò–û –î–∞—Ç–∞–ù–∞—á–∞–ª–∞ - –î–∞—Ç–∞–û–∫–æ–Ω—á–∞–Ω–∏—è</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<code>–ê–Ω–æ—Å–æ–≤–∞ –ö–∏—Ä–∞ 29.10.2025 - 05.11.2025</code>\n\n",
        reply_markup=await home_page_kb(message.from_user.id)
    )
    await state.set_state(MedicalCertificateStates.waiting_for_certificate_data)


@admin_router.message(MedicalCertificateStates.waiting_for_certificate_data)
async def process_medical_certificate(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Å–ø—Ä–∞–≤–∫–µ"""
    try:
        input_text = message.text.strip()

        # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥
        result = await parse_and_process_certificate(input_text)

        if result["success"]:
            response_text = (
                f"‚úÖ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ–ª–µ–∑–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!\n\n"
                f"üë§ –£—á–µ–Ω–∏–∫: <b>{result['student_name']}</b>\n"
                f"üè• –ü–µ—Ä–∏–æ–¥ –±–æ–ª–µ–∑–Ω–∏: <b>{result['start_date']} - {result['end_date']}</b>\n"
                f"üìÖ –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π: <b>{result['missed_classes']}</b>\n"
                f"üì¶ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π: <b>{result['classes_added']}</b>\n"
                f"üìä –ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: <b>{result['new_balance']}</b>\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ–ª–µ–∑–Ω–∏</b>"
            )
        else:
            response_text = f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"

        await message.answer(response_text)
        await state.clear()

    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()


async def parse_and_process_certificate(input_text: str) -> dict:
    """
    –ü–∞—Ä—Å–∏—Ç –≤–≤–æ–¥ –æ —Å–ø—Ä–∞–≤–∫–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∑–∞–Ω—è—Ç–∏–π
    """
    try:
        # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç: "–§–ò–û DD.MM.YYYY - DD.MM.YYYY"
        pattern = r'^(.+?)\s+(\d{2}\.\d{2}\.\d{4})\s*-\s*(\d{2}\.\d{2}\.\d{4})$'
        match = re.match(pattern, input_text.strip())

        if not match:
            return {"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –ê–Ω–æ—Å–æ–≤–∞ –ö–∏—Ä–∞ 29.10.2024 - 05.11.2024"}

        student_name = match.group(1).strip()
        start_date_str = match.group(2)
        end_date_str = match.group(3)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
        try:
            start_date = datetime.strptime(start_date_str, '%d.%m.%Y').date()
            end_date = datetime.strptime(end_date_str, '%d.%m.%Y').date()
        except ValueError:
            return {"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"}

        if start_date > end_date:
            return {"success": False, "error": "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è"}

        # –ò—â–µ–º —É—á–µ–Ω–∏–∫–∞
        student_data = await execute_raw_sql(
            f"""SELECT id, name, classes_remaining 
            FROM public.student 
            WHERE active = true 
            AND name ILIKE $1
            LIMIT 1;""",
            f"%{student_name}%"
        )

        if not student_data:
            return {"success": False, "error": f"–£—á–µ–Ω–∏–∫ '{student_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        student = student_data[0]
        student_id = student['id']
        current_balance = student['classes_remaining'] if student['classes_remaining'] is not None else 0

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
        missed_classes_result = await calculate_missed_classes(student_id, start_date, end_date)

        if not missed_classes_result["success"]:
            return missed_classes_result

        missed_classes = missed_classes_result["missed_classes"]

        if missed_classes == 0:
            return {"success": False, "error": "–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É —É—á–µ–Ω–∏–∫–∞ –Ω–µ –±—ã–ª–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π"}

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —É—á–µ–Ω–∏–∫–∞
        new_balance = current_balance + missed_classes

        update_result = await execute_raw_sql(
            f"UPDATE public.student SET classes_remaining = $1 WHERE id = $2;",
            new_balance, student_id
        )

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø—Ä–∞–≤–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏)
        try:
            await execute_raw_sql(
                f"""INSERT INTO public.medical_certificates 
                    (student_id, start_date, end_date, missed_classes, added_classes, processed_date) 
                VALUES ($1, $2, $3, $4, $5, CURRENT_DATE);""",
                student_id, start_date, end_date, missed_classes, missed_classes
            )
        except Exception as e:
            # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã medical_certificates –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            print(f"Note: Could not log medical certificate: {e}")

        return {
            "success": True,
            "student_name": student['name'],
            "start_date": start_date.strftime('%d.%m.%Y'),
            "end_date": end_date.strftime('%d.%m.%Y'),
            "missed_classes": missed_classes,
            "classes_added": missed_classes,
            "new_balance": new_balance
        }

    except Exception as e:
        print(f"Error processing medical certificate: {str(e)}")
        return {"success": False, "error": f"–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}


async def calculate_missed_classes(student_id: int, start_date: date, end_date: date) -> dict:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥ –±–æ–ª–µ–∑–Ω–∏
    –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞
        schedule_data = await execute_raw_sql(
            f"""SELECT DISTINCT sched.day_week, sched.time_start
            FROM public.student_schedule ss
            JOIN public.schedule sched ON ss.schedule = sched.id
            WHERE ss.student = $1;""",
            student_id
        )

        if not schedule_data:
            return {"success": False, "error": "–£ —É—á–µ–Ω–∏–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", "missed_classes": 0}

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–Ω–µ–π –≤ —á–∏—Å–ª–æ–≤—ã–µ
        weekdays_ru_to_int = {
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0,
            '–≤—Ç–æ—Ä–Ω–∏–∫': 1,
            '—Å—Ä–µ–¥–∞': 2,
            '—á–µ—Ç–≤–µ—Ä–≥': 3,
            '–ø—è—Ç–Ω–∏—Ü–∞': 4,
            '—Å—É–±–±–æ—Ç–∞': 5,
            '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6
        }

        student_weekdays = [weekdays_ru_to_int[row['day_week']] for row in schedule_data]

        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–Ω–µ–π –≤ –ø–µ—Ä–∏–æ–¥ –±–æ–ª–µ–∑–Ω–∏
        missed_classes = 0
        current_date = start_date

        while current_date <= end_date:
            if current_date.weekday() in student_weekdays:
                missed_classes += 1
            current_date += timedelta(days=1)

        return {
            "success": True,
            "missed_classes": missed_classes,
            "schedule_days": len(schedule_data)
        }

    except Exception as e:
        print(f"Error calculating missed classes: {str(e)}")
        return {"success": False, "error": f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π: {str(e)}", "missed_classes": 0}