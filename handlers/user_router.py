from typing import Dict, Optional

import pytz
from aiogram import Router, F, types
from aiogram.filters import CommandStart, CommandObject, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, \
    CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.dialects.postgresql import asyncpg

from config import settings
from create_bot import bot
from database.database_module import create_visit_record_model
from database.schemas import schema
from database import redis_storage
from db_handler.db_funk import get_user_data, insert_user, execute_raw_sql
from keyboards.kbs import main_kb, home_page_kb, places_kb
from utils.utils import get_refer_id, get_now_time, get_current_week_day, get_belt_emoji
from aiogram.utils.chat_action import ChatActionSender
import logging
from datetime import datetime, time


logging.basicConfig(level=logging.ERROR)

user_router = Router()

universe_text = ('–ß—Ç–æ–± –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π '
                 '–∫–æ–º–∞–Ω–¥–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –º–µ–Ω—é.')


@user_router.message(CommandStart())
async def cmd_start(message: Message, command: CommandObject):
    async with ChatActionSender.typing(bot=bot, chat_id=message.from_user.id):
        user_info = await get_user_data(user_id=message.from_user.id)

        if user_info:
            permissions_dict = {0: '–ì–æ—Å—Ç—å', 1: '–¢—Ä–µ–Ω–µ—Ä', 2: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 3: '–†–æ–¥–∏—Ç–µ–ª—å', 4: '–°—Ç—É–¥–µ–Ω—Ç',
                                99: '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'}
            permissions = permissions_dict.get(user_info.get('permissions'))

            response_text = f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å {permissions}  {user_info.get("telegram_username")}, –í–∏–∂—É —á—Ç–æ –≤—ã —É–∂–µ –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. {universe_text}'
        else:
            user_data = {
                'telegram_id': message.from_user.id,
                'permissions': 0,
                'telegram_username': message.from_user.full_name,
                'refer_id': None,
                'date_reg': datetime.now()
            }

            await insert_user(user_data)
            response_text = f'{message.from_user.full_name}, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ {universe_text}'

        await message.answer(text=response_text, reply_markup=await main_kb(message.from_user.id))

@user_router.message(F.text.contains('–ù–∞–∑–∞–¥'))
async def cmd_start(message: Message):
    await message.answer(f'{message.from_user.first_name}, –í–∏–∂—É —á—Ç–æ –≤—ã —É–∂–µ –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. {universe_text}',
                         reply_markup=await main_kb(message.from_user.id))


# —Ö–µ–Ω–¥–ª–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è
@user_router.message(Command('profile'))
@user_router.message(F.text.contains('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'))
async def get_profile(message: Message):
    async with ChatActionSender.typing(bot=bot, chat_id=message.from_user.id):
        user_info = await get_user_data(user_id=message.from_user.id)

        if user_info:
            permissions_dict = {0: '–ì–æ—Å—Ç—å', 1: '–¢—Ä–µ–Ω–µ—Ä', 2: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 3: '–†–æ–¥–∏—Ç–µ–ª—å', 4: '–°—Ç—É–¥–µ–Ω—Ç',
                                99: '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'}
            permissions = permissions_dict.get(user_info.get('permissions'))

            text = (f'üëâ –í–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º ID: <code><b>{message.from_user.id}</b></code> , –ø—Ä–∞–≤–∞ {permissions} \n')

    await message.answer(text, reply_markup=await main_kb(message.from_user.id))


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ {id: name}
selected_students = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–µ—â–µ–Ω–∏—è" —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
@user_router.message(F.text.contains('‚öôÔ∏è –ü–æ—Å–µ—â–µ–Ω–∏—è'))
async def handle_visits(message: types.Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f" # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        user_permission = await execute_raw_sql(
            f"""SELECT permissions FROM {schema}.telegram_user 
            WHERE telegram_id = {message.from_user.id};"""
        )
        print(user_permission)
        if user_permission and user_permission[0]['permissions'] in (1, 2, 99):
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ:", reply_markup=places_kb())
        else:
            await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", reply_markup=types.ReplyKeyboardRemove())

    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        print(f"Permission check error: {str(e)}")


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class TrainingStates(StatesGroup):
    waiting_for_time = State()






async def get_trainer_name(trainer_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ ID"""
    trainer_data = await execute_raw_sql(
        f"SELECT name FROM {schema}.trainer WHERE id = $1;",
        trainer_id
    )
    return trainer_data[0]['name'] if trainer_data else f"–¢—Ä–µ–Ω–µ—Ä #{trainer_id}"


async def get_place_name(place_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –ø–æ ID"""
    place_data = await execute_raw_sql(
        f"SELECT name FROM {schema}.training_place WHERE id = $1;",
        place_id
    )
    return place_data[0]['name'] if place_data else f"–ú–µ—Å—Ç–æ #{place_id}"


async def get_schedule_time(schedule_id: int) -> Optional[time]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    schedule_data = await execute_raw_sql(
        f"SELECT time_start FROM {schema}.schedule WHERE id = $1;",
        schedule_id
    )
    return schedule_data[0]['time_start'] if schedule_data else None


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@user_router.message(F.text.in_(['ü•ã –ì–ú–†', 'ü•ã –°–æ—Ä–º–æ–≤—Å–∫–∞—è', 'ü•ã –°—Ç–∞–≤—Ä–∞–ø–æ–ª—å—Å–∫–∞—è']))
async def handle_city_selection(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    try:
        selected_place_name = message.text.replace('ü•ã ', '')

        # –ü–æ–ª—É—á–∞–µ–º ID –º–µ—Å—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        place_data = await execute_raw_sql(
            f"SELECT id FROM {schema}.training_place WHERE name = $1;",
            selected_place_name
        )

        if not place_data:
            await message.answer("–ú–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        place_id = place_data[0]['id']
        today_weekday = get_current_week_day()
        print(today_weekday)
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        trainings = await execute_raw_sql(
            f"""SELECT s.id as schedule_id, s.time_start, s.time_end, 
                  s.sport_discipline, sp.name as discipline_name
            FROM {schema}.schedule s
            JOIN {schema}.sport sp ON s.sport_discipline = sp.id
            WHERE s.training_place = $1 AND s.day_week = $2
            ORDER BY s.time_start;""",
            place_id, today_weekday
        )

        if not trainings:
            await message.answer(f"–ù–∞ {selected_place_name} —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            place_id=place_id,
            place_name=selected_place_name,
            trainings=trainings
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        for training in trainings:
            start = training['time_start'].strftime("%H:%M") if isinstance(training['time_start'], time) else training[
                'time_start']
            end = training['time_end'].strftime("%H:%M") if isinstance(training['time_end'], time) else training[
                'time_end']
            builder.button(
                text=f"{start}-{end} ({training['discipline_name']})",
                callback_data=f"training:{training['schedule_id']}"
            )

        builder.adjust(1)
        await message.answer(
            f"üè¢ –ú–µ—Å—Ç–æ: {selected_place_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(TrainingStates.waiting_for_time)

    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Error in handle_city_selection: {str(e)}")

@user_router.callback_query(TrainingStates.waiting_for_time, F.data.startswith("training:"))
async def handle_time_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    try:
        _, schedule_id = callback.data.split(":")
        data = await state.get_data()

        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        selected_training = next(
            (t for t in data['trainings'] if str(t['schedule_id']) == schedule_id),
            None
        )
        if not selected_training:
            await callback.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä–∞
        trainer_data = await execute_raw_sql(
            f"SELECT id, name FROM {schema}.trainer WHERE telegram_id = $1;",
            callback.from_user.id
        )
        if not trainer_data:
            await callback.answer("‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä", show_alert=True)
            return

        trainer_id = trainer_data[0]['id']
        trainer_name = trainer_data[0]['name']

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        students = await execute_raw_sql(
            f"""SELECT st.id, st.name 
            FROM {schema}.student_schedule ss
            JOIN {schema}.student st ON ss.student = st.id
            WHERE ss.schedule = $1 AND st.active = true;""",
            int(schedule_id)
        )

        if not students:
            await callback.message.answer("–ù–∞ —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏
        builder = InlineKeyboardBuilder()
        for student in students:
            student_id = str(student['id'])
            builder.button(
                text=f"{'‚òëÔ∏è' if student_id in selected_students else '‚¨úÔ∏è'} {student['name']}",
                callback_data=f"student:{student_id}"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        builder.button(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ",
            callback_data=f"confirm:{schedule_id}:{trainer_id}:{data['place_id']}:{selected_training['sport_discipline']}"
        )

        # –î–û–ë–ê–í–õ–Ø–ï–ú –ö–ù–û–ü–ö–£ "+ —É—á–µ–Ω–∏–∫" –ú–ï–ñ–î–£ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú–ò –ö–ù–û–ü–ö–ê–ú–ò
        builder.button(
            text="‚ûï —É—á–µ–Ω–∏–∫",
            callback_data=f"extra_student:{schedule_id}:{trainer_id}:{data['place_id']}:{selected_training['sport_discipline']}"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è
        builder.button(
            text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ç–æ –ø—Ä–∏—à–µ–ª",
            callback_data=f"show_attendance:{schedule_id}"
        )

        builder.adjust(1)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        start_time = selected_training['time_start'].strftime("%H:%M") if isinstance(selected_training['time_start'],
                                                                                     time) else selected_training[
            'time_start']

        await callback.message.edit_text(
            f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {trainer_name}\n"
            f"üè¢ –ú–µ—Å—Ç–æ: {data['place_name']}\n"
            f"üïí –í—Ä–µ–º—è: {start_time}\n"
            f"üßò –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {selected_training['discipline_name']}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:",
            reply_markup=builder.as_markup()
        )

        await callback.answer()
        await state.clear()

    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        print(f"Error in handle_time_selection: {str(e)}")
        await state.clear()


@user_router.callback_query(F.data.startswith("student:"))
async def select_student(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    try:
        _, student_id = callback.data.split(":")
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –∏–∑ Redis
        selected_students = await redis_storage.get_selected_students(user_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        new_keyboard = []
        for row in callback.message.reply_markup.inline_keyboard:
            new_row = []
            for button in row:
                if button.callback_data == callback.data:
                    student_name = button.text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏

                    if student_id in selected_students:
                        # –£–¥–∞–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –≤—ã–±–æ—Ä–∞
                        await redis_storage.remove_student(user_id, student_id)
                        new_text = f"‚¨úÔ∏è {student_name}"
                    else:
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –≤—ã–±–æ—Ä
                        await redis_storage.add_student(user_id, student_id, student_name)
                        new_text = f"‚òëÔ∏è {student_name}"

                    new_row.append(InlineKeyboardButton(text=new_text, callback_data=button.callback_data))
                else:
                    new_row.append(button)
            new_keyboard.append(new_row)

        await callback.message.edit_reply_markup(
            reply_markup=InlineKeyboardMarkup(inline_keyboard=new_keyboard)
        )
        await callback.answer()

    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ", show_alert=True)
        print(f"Error in select_student: {str(e)}")


@user_router.callback_query(F.data.startswith("confirm:"))
async def confirm_attendance(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ Redis
        selected_students = await redis_storage.get_selected_students(user_id)

        if not selected_students:
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞!", show_alert=True)
            return

        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        _, schedule_id, trainer_id, place_id, discipline_id = callback.data.split(":")
        schedule_id = int(schedule_id)
        trainer_id = int(trainer_id)
        place_id = int(place_id)
        discipline_id = int(discipline_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        schedule_data = await execute_raw_sql(
            f"SELECT time_start FROM {schema}.schedule WHERE id = $1;",
            schedule_id
        )
        if not schedule_data:
            await callback.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        # –†–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∏–≤–Ω—ã–µ datetime (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã)
        current_datetime = datetime.now()
        current_date = current_datetime.date()
        schedule_time = schedule_data[0]['time_start']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–µ—â–µ–Ω–∏—è
        success_count = 0
        skipped_count = 0
        errors = []

        for student_id_str, student_name in selected_students.items():
            try:
                student_id = int(student_id_str)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É)
                existing = await execute_raw_sql(
                    f"""SELECT 1 FROM {schema}.visit 
                    WHERE student = $1 AND shedule = $2 
                    AND DATE(data) = $3 LIMIT 1;""",
                    student_id, schedule_id, current_date
                )

                if existing:
                    skipped_count += 1
                    continue

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∏–≤–Ω—ã–π datetime (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã)
                await execute_raw_sql(
                    f"""INSERT INTO {schema}.visit (
                        data, trainer, student, place, sport_discipline, shedule
                    ) VALUES ($1, $2, $3, $4, $5, $6);""",
                    current_datetime,  # –ù–∞–∏–≤–Ω—ã–π datetime
                    trainer_id,
                    student_id,
                    place_id,
                    discipline_id,
                    schedule_id
                )
                success_count += 1

            except Exception as e:
                errors.append(f"{student_name}: {str(e)}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = [
            f"üìÖ –î–∞—Ç–∞: {current_date.strftime('%d.%m.%Y')}",
            f"‚è± –í—Ä–µ–º—è: {schedule_time.strftime('%H:%M')}",
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}",
            f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏): {skipped_count}",
            f"‚ùå –û—à–∏–±–∫–∏: {len(errors)}",
            *[f"‚Ä¢ {name}" for name in selected_students.values()]
        ]

        if errors:
            report.append("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:")
            report.extend(errors[:3])

        await callback.message.answer("\n".join(report))

        # –û–ß–ò–©–ê–ï–ú –í–´–ë–û–† –ü–û–°–õ–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø
        await redis_storage.clear_selected_students(user_id)

        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer()

    except Exception as e:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã", show_alert=True)
        print(f"Error in confirm_attendance: {str(e)}")


@user_router.callback_query(F.data.startswith("show_attendance:"))
async def show_attendance_status(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ –ø–æ—è—Å–∞–º"""
    try:
        _, schedule_id = callback.data.split(":")
        schedule_id = int(schedule_id)

        current_date = datetime.now().date()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
        training_info = await execute_raw_sql(
            f"""SELECT s.time_start, s.time_end, tp.name as place_name, 
                sp.name as discipline_name
            FROM {schema}.schedule s
            JOIN {schema}.training_place tp ON s.training_place = tp.id
            JOIN {schema}.sport sp ON s.sport_discipline = sp.id
            WHERE s.id = $1;""",
            schedule_id
        )

        if not training_info:
            await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        training = training_info[0]

        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—à–ª–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–µ–≥–æ–¥–Ω—è
        # –í–∫–ª—é—á–∞—è —Ç–µ—Ö, –∫—Ç–æ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ "+ —É—á–µ–Ω–∏–∫"
        students = await execute_raw_sql(
            f"""SELECT st.id, st.name, st.birthday, st.rang,
                CASE 
                    WHEN v.id IS NOT NULL THEN 'present'
                    ELSE 'absent'
                END as status
            FROM {schema}.student st
            LEFT JOIN {schema}.student_schedule ss ON ss.student = st.id AND ss.schedule = $1
            LEFT JOIN {schema}.visit v ON v.student = st.id 
                AND v.shedule = $1 
                AND DATE(v.data) = $2
            WHERE st.active = true
            AND (
                ss.schedule = $1  -- –°—Ç—É–¥–µ–Ω—Ç—ã –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                OR EXISTS (        -- –ò–õ–ò —Å—Ç—É–¥–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—à–ª–∏ —á–µ—Ä–µ–∑ "+ —É—á–µ–Ω–∏–∫"
                    SELECT 1 FROM {schema}.visit v2 
                    WHERE v2.student = st.id 
                    AND v2.shedule = $1 
                    AND DATE(v2.data) = $2
                )
            )
            ORDER BY 
                CASE 
                    WHEN st.rang IS NULL THEN 999
                    WHEN st.rang ILIKE '%–±–µ–ª%' THEN 1
                    WHEN st.rang ILIKE '%–∂–µ–ª—Ç%' THEN 2
                    WHEN st.rang ILIKE '%–∂—ë–ª—Ç%' THEN 2 
                    WHEN st.rang ILIKE '%–æ—Ä–∞–Ω–∂%' THEN 3
                    WHEN st.rang ILIKE '%–∑–µ–ª–µ–Ω%' THEN 4
                    WHEN st.rang ILIKE '%—Å–∏–Ω%' THEN 5
                    WHEN st.rang ILIKE '%–∫–æ—Ä–∏—á–Ω%' THEN 6
                    WHEN st.rang ILIKE '%–∫—Ä–∞—Å–Ω%' THEN 7
                    WHEN st.rang ILIKE '%—á–µ—Ä–Ω%' THEN 8
                    ELSE 999
                END, st.name;""",
            schedule_id, current_date
        )

        if not students:
            await callback.answer("–ù–∞ —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", show_alert=True)
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        start_time = training['time_start'].strftime("%H:%M") if isinstance(training['time_start'], time) else training[
            'time_start']
        end_time = training['time_end'].strftime("%H:%M") if isinstance(training['time_end'], time) else training[
            'time_end']

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
        message_lines = [
            f"{training['place_name']}",
            f"–ì—Ä—É–ø–ø–∞ {start_time}-{end_time} ({training['discipline_name']})",
            ""
        ]

        present_students = []
        absent_students = []

        for student in students:
            birth_year = student['birthday'].year if student['birthday'] else " "
            belt_emoji = get_belt_emoji(student['rang'])

            student_line = f"{belt_emoji}{student['name']} {birth_year}"

            if student['status'] == 'present':
                present_students.append(student_line)
            else:
                absent_students.append(student_line)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
        for student_line in present_students:
            message_lines.append(student_line)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
        if absent_students:
            message_lines.extend([
                "",
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç:"
            ])
            for student_line in absent_students:
                message_lines.append(student_line)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        message_lines.extend([
            "",
            f"–í—Å–µ–≥–æ: {len(present_students) + len(absent_students)} —á–µ–ª.",
            f"–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {len(present_students)} —á–µ–ª.",
            f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {len(absent_students)} —á–µ–ª."
        ])

        await callback.message.answer("\n".join(message_lines))
        await callback.answer()

    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è", show_alert=True)
        print(f"Error in show_attendance_status: {str(e)}")

class TrainingStates(StatesGroup):
    waiting_for_time = State()
    waiting_for_extra_student = State()  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


async def record_extra_student_visit(student_name: str, trainer_telegram_id: int,
                                     schedule_id: int = None, place_id: int = None,
                                     discipline_id: int = None) -> dict:
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É—á–µ–Ω–∏–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    """
    try:
        # –ò—â–µ–º —É—á–µ–Ω–∏–∫–∞
        student_data = await execute_raw_sql(
            f"""SELECT id, name, classes_remaining 
            FROM public.student 
            WHERE active = true 
            AND name ILIKE $1
            LIMIT 1;""",
            f"%{student_name}%"
        )

        if not student_data:
            return {"success": False, "error": f"–£—á–µ–Ω–∏–∫ '{student_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        student = student_data[0]
        student_id = student['id']
        current_balance = student['classes_remaining'] if student['classes_remaining'] is not None else 0

        # –ò—â–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ telegram_id
        trainer_data = await execute_raw_sql(
            f"""SELECT id, name 
            FROM public.trainer 
            WHERE telegram_id = $1
            AND active = true
            LIMIT 1;""",
            trainer_telegram_id
        )

        if not trainer_data:
            return {"success": False, "error": "–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        trainer = trainer_data[0]
        trainer_id = trainer['id']

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞)
        current_datetime_data = await execute_raw_sql(f"SELECT NOW()::timestamp as current_datetime;")
        current_datetime = current_datetime_data[0]['current_datetime']
        current_date = current_datetime.date()
        current_time = current_datetime.time()

        # –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–ö–ê–¢: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ —É—á–µ–Ω–∏–∫ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–µ–≥–æ–¥–Ω—è
        existing_visit = await execute_raw_sql(
            f"""SELECT id 
            FROM public.visit 
            WHERE student = $1 
            AND shedule = $2 
            AND DATE(data) = $3
            LIMIT 1;""",
            student_id, schedule_id, current_date
        )

        if existing_visit:
            return {
                "success": False,
                "error": f"–£—á–µ–Ω–∏–∫ {student['name']} —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–µ–≥–æ–¥–Ω—è"
            }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —Å–ø–∏—Å–∞–Ω–∏–µ —É —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ (–¥–ª—è –ª—é–±—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫)
        today_visits = await execute_raw_sql(
            f"""SELECT COUNT(*) as visit_count 
            FROM public.visit 
            WHERE student = $1 
            AND DATE(data) = $2;""",
            student_id, current_date
        )

        visit_count = today_visits[0]['visit_count'] if today_visits else 0
        class_deducted = False
        new_balance = current_balance

        # –°–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –±—ã–ª–æ –ø–æ—Å–µ—â–µ–Ω–∏–π
        if visit_count == 0 and current_balance > 0:
            new_balance = current_balance - 1
            class_deducted = True

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —É—á–µ–Ω–∏–∫–∞
            await execute_raw_sql(
                f"UPDATE public.student SET classes_remaining = $1 WHERE id = $2;",
                new_balance, student_id
            )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        if not place_id:
            # –ï—Å–ª–∏ –º–µ—Å—Ç–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
            place_data = await execute_raw_sql(
                f"SELECT id, name FROM public.training_place LIMIT 1;"
            )
            if not place_data:
                return {"success": False, "error": "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–µ—Å—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"}
            place = place_data[0]
            place_id = place['id']
        else:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ
            place_data = await execute_raw_sql(
                f"SELECT id, name FROM public.training_place WHERE id = $1;",
                place_id
            )
            if not place_data:
                return {"success": False, "error": "–£–∫–∞–∑–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}
            place = place_data[0]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Ä—Ç–∏–≤–Ω—É—é –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
        if not discipline_id:
            # –ï—Å–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
            sport_data = await execute_raw_sql(
                f"SELECT id, name FROM public.sport LIMIT 1;"
            )
            sport_id = sport_data[0]['id'] if sport_data else 1
            sport_name = sport_data[0]['name'] if sport_data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞"
        else:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ
            sport_data = await execute_raw_sql(
                f"SELECT id, name FROM public.sport WHERE id = $1;",
                discipline_id
            )
            if sport_data:
                sport_id = sport_data[0]['id']
                sport_name = sport_data[0]['name']
            else:
                sport_id = discipline_id
                sport_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞"

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp –±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞)
        visit_result = await execute_raw_sql(
            f"""INSERT INTO public.visit 
                (data, trainer, student, place, sport_discipline, shedule) 
            VALUES ($1, $2, $3, $4, $5, $6) 
            RETURNING id;""",
            current_datetime, trainer_id, student_id, place_id, sport_id, schedule_id
        )

        if not visit_result:
            return {"success": False, "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è"}

        return {
            "success": True,
            "student_name": student['name'],
            "place_name": place['name'],
            "visit_date": current_date.strftime('%d.%m.%Y'),
            "visit_time": current_time.strftime('%H:%M'),
            "class_deducted": class_deducted,
            "new_balance": new_balance,
            "trainer_name": trainer['name'],
            "sport_name": sport_name,
            "schedule_id": schedule_id
        }

    except Exception as e:
        print(f"Error recording extra student visit: {str(e)}")
        return {"success": False, "error": f"–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}

@user_router.callback_query(F.data.startswith("extra_student:"))
async def handle_extra_student(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '+ —É—á–µ–Ω–∏–∫' –¥–ª—è –∑–∞–ø–∏—Å–∏ —É—á–µ–Ω–∏–∫–∞ –Ω–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    try:
        _, schedule_id, trainer_id, place_id, discipline_id = callback.data.split(":")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
        await state.update_data(
            schedule_id=int(schedule_id),
            trainer_id=int(trainer_id),
            place_id=int(place_id),
            discipline_id=int(discipline_id)
        )

        await callback.message.answer(
            "‚ûï –ó–∞–ø–∏—Å—å —É—á–µ–Ω–∏–∫–∞ –Ω–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —É—á–µ–Ω–∏–∫–∞:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "<code>–ê–Ω–æ—Å–æ–≤–∞ –ö–∏—Ä–∞</code>\n\n"
            "–ò–ª–∏:\n"
            "<code>–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä</code>"
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ —É—á–µ–Ω–∏–∫–∞
        await state.set_state(TrainingStates.waiting_for_extra_student)
        await callback.answer()

    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        print(f"Error in handle_extra_student: {str(e)}")


@user_router.message(TrainingStates.waiting_for_extra_student)
async def process_extra_student_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —É—á–µ–Ω–∏–∫–∞ –Ω–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    try:
        student_name = message.text.strip()
        data = await state.get_data()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø–∏—Å–∏ —É—á–µ–Ω–∏–∫–∞
        result = await record_extra_student_visit(
            student_name=student_name,
            trainer_telegram_id=message.from_user.id,
            schedule_id=data.get('schedule_id'),
            place_id=data.get('place_id'),
            discipline_id=data.get('discipline_id')
        )

        if result["success"]:
            response_text = (
                f"‚úÖ –£—á–µ–Ω–∏–∫ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!\n\n"
                f"üë§ –£—á–µ–Ω–∏–∫: <b>{result['student_name']}</b>\n"
                f"üè¢ –ú–µ—Å—Ç–æ: <b>{result['place_name']}</b>\n"
                f"üìÖ –î–∞—Ç–∞: <b>{result['visit_date']}</b>\n"
                f"‚è∞ –í—Ä–µ–º—è: <b>{result['visit_time']}</b>\n"
            )

            if result['class_deducted']:
                response_text += f"üìä –°–ø–∏—Å–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–µ: <b>–î–∞</b>\n"
                response_text += f"üéØ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{result['new_balance']}</b> –∑–∞–Ω—è—Ç–∏–π"
            else:
                response_text += f"üìä –°–ø–∏—Å–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–µ: <b>–ù–µ—Ç</b> (—É–∂–µ —Å–ø–∏—Å–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è)\n"
                response_text += f"üéØ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{result['new_balance']}</b> –∑–∞–Ω—è—Ç–∏–π"
        else:
            response_text = f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"

        await message.answer(response_text)
        await state.clear()

    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()