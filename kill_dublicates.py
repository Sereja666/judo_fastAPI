import asyncio
import asyncpg

from config import PG_LINK


async def remove_duplicate_student_schedule(db_config: dict):
    """
    –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ student_schedule
    """
    conn = await asyncpg.connect(**db_config)

    try:
        # 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        count_result = await conn.fetchval("""
            SELECT COUNT(*) FROM (
                SELECT student, schedule, COUNT(*) 
                FROM public.student_schedule 
                GROUP BY student, schedule 
                HAVING COUNT(*) > 1
            ) AS duplicates
        """)

        if count_result == 0:
            await conn.close()
            return "‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

        # 2. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        delete_result = await conn.execute("""
            DELETE FROM public.student_schedule 
            WHERE id NOT IN (
                SELECT MIN(id) 
                FROM public.student_schedule 
                GROUP BY student, schedule
            )
        """)

        await conn.close()

        return f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {count_result} –∑–∞–ø–∏—Å–µ–π"

    except Exception as e:
        await conn.close()
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
async def find_duplicate_student_schedule(db_config: dict):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    """
    conn = await asyncpg.connect(**db_config)

    duplicates = await conn.fetch("""
        SELECT student, schedule, COUNT(*) as duplicate_count
        FROM public.student_schedule 
        GROUP BY student, schedule 
        HAVING COUNT(*) > 1
        ORDER BY duplicate_count DESC
    """)

    await conn.close()

    if not duplicates:
        return "‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    result = ["–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã:"]
    for dup in duplicates:
        result.append(f"–°—Ç—É–¥–µ–Ω—Ç {dup['student']} + –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {dup['schedule']}: {dup['duplicate_count']} –∑–∞–ø–∏—Å–µ–π")

    return "\n".join(result)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():


    print("üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
    duplicates_info = await find_duplicate_student_schedule(PG_LINK)
    print(duplicates_info)

    print("\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
    result = await remove_duplicate_student_schedule(PG_LINK)
    print(result)


if __name__ == "__main__":
    asyncio.run(main())