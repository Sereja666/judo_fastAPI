#!/usr/bin/env python3
"""
–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –≤—ã—á–∏—Ç–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ cron –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00
–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è - 1 SQL –∑–∞–ø—Ä–æ—Å
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ PYTHONPATH
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

try:
    from database.schemas import schema
    import asyncpg
    import logging
    from config import settings
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/daily_attendance.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger('daily_attendance')

async def execute_raw_sql(query: str, *params):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        conn = await asyncpg.connect(**settings.db.pg_link)
        try:
            if params:
                result = await conn.fetch(query, *params)
            else:
                result = await conn.fetch(query)
            return result
        finally:
            await conn.close()
    except Exception as e:
        logger.error(f"Database error: {str(e)}")
        raise

async def subtract_classes_for_todays_attendance():
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π —É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    –û–¥–∏–Ω SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        weekdays_ru = {
            0: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            1: '–≤—Ç–æ—Ä–Ω–∏–∫', 
            2: '—Å—Ä–µ–¥–∞',
            3: '—á–µ—Ç–≤–µ—Ä–≥',
            4: '–ø—è—Ç–Ω–∏—Ü–∞', 
            5: '—Å—É–±–±–æ—Ç–∞',
            6: '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }
        
        today = datetime.now()
        today_weekday_ru = weekdays_ru[today.weekday()]
        today_date = today.date()
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –≤—ã—á–∏—Ç–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –∑–∞ {today_date} ({today_weekday_ru})")
        
        # –û–î–ò–ù SQL –ó–ê–ü–†–û–° –î–õ–Ø –í–°–ï–ì–û!
        result = await execute_raw_sql(
            f"""UPDATE {schema}.student 
            SET classes_remaining = classes_remaining - 1 
            WHERE id IN (
                SELECT DISTINCT ss.student
                FROM {schema}.student_schedule ss
                JOIN {schema}.schedule sched ON ss.schedule = sched.id
                JOIN {schema}.student s ON ss.student = s.id
                WHERE sched.day_week = $1
                AND s.active = true
                AND s.classes_remaining > 0
            )
            AND active = true
            AND classes_remaining > 0
            RETURNING id, name, classes_remaining;""",
            today_weekday_ru
        )
        
        updated_count = len(result)
        
        if updated_count == 0:
            logger.info(f"‚ÑπÔ∏è –ù–∞ {today_weekday_ru} –Ω–µ –±—ã–ª–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è")
            return {
                "success": True, 
                "message": "–ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è", 
                "updated": 0,
                "date": today_date.isoformat(),
                "weekday": today_weekday_ru
            }
        
        logger.info(f"‚úÖ –°–ø–∏—Å–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–π —É {updated_count} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        
        # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤)
        logger.info("üìä –û—Ç—á–µ—Ç –ø–æ —Å–ø–∏—Å–∞–Ω–∏—è–º:")
        for student in result[:5]:
            logger.info(f"   üëâ {student['name']} - –æ—Å—Ç–∞–ª–æ—Å—å {student['classes_remaining']} –∑–∞–Ω—è—Ç–∏–π")
        if updated_count > 5:
            logger.info(f"   ... –∏ –µ—â–µ {updated_count - 5} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        
        return {
            "success": True,
            "message": f"‚úÖ –°–ø–∏—Å–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–π —É {updated_count} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
            "updated": updated_count,
            "date": today_date.isoformat(),
            "weekday": today_weekday_ru
        }
        
    except Exception as e:
        error_msg = f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg)
        return {
            "success": False,
            "message": error_msg,
            "updated": 0,
            "errors": [str(e)]
        }

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ cron"""
    try:
        logger.info("=" * 50)
        logger.info("üèÅ –ù–ê–ß–ê–õ–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø –°–ö–†–ò–ü–¢–ê")
        
        result = await subtract_classes_for_todays_attendance()
        
        logger.info(f"üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢: {result['message']}")
        logger.info("=" * 50)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è cron
        sys.exit(0 if result['success'] else 1)
        
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)

if __name__ == '__main__':
    asyncio.run(main())