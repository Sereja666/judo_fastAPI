import pytz
from aiogram import Router, F, types
from aiogram.filters import CommandStart, CommandObject, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

from aiogram.utils.keyboard import InlineKeyboardBuilder
from urllib.parse import quote, unquote
from create_bot import bot, db_manager
from db_handler.db_funk import get_user_data, insert_user, execute_raw_sql
from keyboards.kbs import main_kb, home_page_kb, places_kb
from utils.utils import get_refer_id, get_now_time, get_current_week_day
from aiogram.utils.chat_action import ChatActionSender
import logging
from datetime import datetime, time

logging.basicConfig(level=logging.ERROR)

user_router = Router()

universe_text = ('–ß—Ç–æ–± –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π '
                 '–∫–æ–º–∞–Ω–¥–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –º–µ–Ω—é.')


# —Ö–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
@user_router.message(CommandStart())
async def cmd_start(message: Message, command: CommandObject):
    async with ChatActionSender.typing(bot=bot, chat_id=message.from_user.id):
        user_info = await get_user_data(user_id=message.from_user.id)
        # await message.answer(text=f'–ê–π–¥–∏ -> {message.from_user.id}, –∏–º—è -> {user_info.get("telegram_username")}', reply_markup=main_kb(message.from_user.id))
        if user_info:
            response_text = f'{user_info.get("telegram_username")}, –í–∏–∂—É —á—Ç–æ –≤—ã —É–∂–µ –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. {universe_text}'
        else:
            await insert_user(user_data={
                'permissions': 0,
                'telegram_id': message.from_user.id,
                'telegram_username': message.from_user.full_name,
                'user_login': message.from_user.username,

                'date_reg': get_now_time()
            })

            response_text = (f'{message.from_user.full_name}, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ {universe_text}')

        await message.answer(text=response_text, reply_markup=main_kb(message.from_user.id))


@user_router.message(F.text.contains('–ù–∞–∑–∞–¥'))
async def cmd_start(message: Message):
    await message.answer(f'{message.from_user.first_name}, –í–∏–∂—É —á—Ç–æ –≤—ã —É–∂–µ –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. {universe_text}',
                         reply_markup=main_kb(message.from_user.id))


# —Ö–µ–Ω–¥–ª–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è
@user_router.message(Command('profile'))
@user_router.message(F.text.contains('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'))
async def get_profile(message: Message):
    async with ChatActionSender.typing(bot=bot, chat_id=message.from_user.id):
        user_info = await get_user_data(user_id=message.from_user.id)
        text = (f'üëâ –í–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º ID: <code><b>{message.from_user.id}</b></code>\n'
                f'üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö —Ç–æ–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{user_info.get("count_refer")}</b>\n\n'
                f'üöÄ –í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: '
                f'<code>https://t.me/easy_refer_bot?start={message.from_user.id}</code>')
    await message.answer(text, reply_markup=home_page_kb(message.from_user.id))


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ {id: name}
selected_students = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–µ—â–µ–Ω–∏—è" —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
@user_router.message(F.text.contains('–ü–æ—Å–µ—â–µ–Ω–∏—è'))
async def handle_visits(message: types.Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_permission = await execute_raw_sql(
            f"SELECT permissions FROM public.telegram_user "
            f"WHERE telegram_id = {message.from_user.id};"
        )

        if user_permission and user_permission[0]['permissions'] in (1, 2, 99):
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ:", reply_markup=places_kb())
        else:
            await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", reply_markup=types.ReplyKeyboardRemove())

    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        print(f"Permission check error: {str(e)}")


@user_router.message(F.text.in_(['ü•ã –ì–ú–†', 'ü•ã –°–æ—Ä–º–æ–≤—Å–∫–∞—è', 'ü•ã –°—Ç–∞–≤—Ä–∞–ø–æ–ª—å—Å–∫–∞—è']))
async def handle_city_selection(message: types.Message):
    try:
        selected_place_name = message.text.replace('ü•ã ', '')
        user_telegram_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ telegram_id
        trainer_data = await execute_raw_sql(
            f"""
            SELECT t.id, t.name 
            FROM public.trainer t
            WHERE t.telegram_id = {user_telegram_id};
            """
        )

        if not trainer_data:
            await message.answer("‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä")
            return

        trainer_id = trainer_data[0]['id']
        trainer_name = trainer_data[0]['name']

        # –ü–æ–ª—É—á–∞–µ–º ID –º–µ—Å—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        place_data = await execute_raw_sql(
            f"SELECT id FROM public.training_place WHERE name = '{selected_place_name}';"
        )

        if not place_data:
            await message.answer("–û—à–∏–±–∫–∞: –º–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        place_id = place_data[0]['id']

        cur_time = datetime.now().strftime("%H:%M")
        week_day = get_current_week_day()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –∑–∞–Ω—è—Ç–∏–∏
        query = f"""
        SELECT 
            s.id as schedule_id,
            s.time_start,
            s.sport_discipline as discipline_id,
            sp.name as discipline_name
        FROM public.schedule s
        JOIN public.sport sp ON s.sport_discipline = sp.id
        WHERE s.training_place = {place_id}
        AND s.day_week = '{week_day}'
        AND s.time_start <= '{cur_time}' 
        AND s.time_end >= '{cur_time}';
        """

        schedule_data = await execute_raw_sql(query)

        if not schedule_data:
            await message.answer(f"–ù–∞ {selected_place_name} —Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π.")
            return

        schedule = schedule_data[0]

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        students = await execute_raw_sql(
            f"""
            SELECT st.id, st.name 
            FROM public.student_schedule ss
            JOIN public.student st ON ss.student = st.id
            WHERE ss.schedule = {schedule['schedule_id']};
            """
        )

        if not students:
            await message.answer(f"–ù–∞ –∑–∞–Ω—è—Ç–∏–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        builder = InlineKeyboardBuilder()

        for student in students:
            is_selected = str(student['id']) in selected_students
            emoji = "‚òëÔ∏è" if is_selected else "‚¨úÔ∏è"

            builder.button(
                text=f"{emoji} {student['name']}",
                callback_data=f"student:{student['id']}"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (trainer_id –±–µ—Ä–µ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–∞)
        builder.button(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ",
            callback_data=(
                f"confirm:{schedule['schedule_id']}:"
                f"{trainer_id}:"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–∑ –ë–î
                f"{place_id}:"
                f"{schedule['discipline_id']}"
            )
        )

        builder.adjust(1)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        start_time = schedule['time_start']
        if isinstance(start_time, time):
            start_time = start_time.strftime("%H:%M")

        await message.answer(
            f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {trainer_name}\n"
            f"üè¢ –ú–µ—Å—Ç–æ: {selected_place_name}\n"
            f"üïí –í—Ä–µ–º—è: {start_time}\n"
            f"üßò –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {schedule['discipline_name']}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:",
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Error in handle_city_selection: {str(e)}")


@user_router.callback_query(F.data.startswith("student:"))
async def select_student(callback: types.CallbackQuery):
    try:
        _, student_id = callback.data.split(":")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        new_keyboard = []
        student_name = None

        for row in callback.message.reply_markup.inline_keyboard:
            new_row = []
            for button in row:
                if button.callback_data == callback.data:
                    # –≠—Ç–æ –Ω–∞–∂–∞—Ç–∞—è –∫–Ω–æ–ø–∫–∞
                    student_name = button.text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
                    if student_id in selected_students:
                        del selected_students[student_id]
                        new_text = f"‚¨úÔ∏è {student_name}"
                    else:
                        selected_students[student_id] = student_name
                        new_text = f"‚òëÔ∏è {student_name}"
                    new_row.append(InlineKeyboardButton(
                        text=new_text,
                        callback_data=button.callback_data
                    ))
                else:
                    new_row.append(button)
            new_keyboard.append(new_row)

        if not student_name:
            await callback.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_reply_markup(
            reply_markup=InlineKeyboardMarkup(inline_keyboard=new_keyboard)
        )
        await callback.answer()

    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ", show_alert=True)
        print(f"Error in select_student: {str(e)}")


@user_router.callback_query(F.data.startswith("confirm:"))
async def confirm_attendance(callback: types.CallbackQuery):
    try:
        if not selected_students:
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞!", show_alert=True)
            return

        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (trainer_id —Ç–µ–ø–µ—Ä—å –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ë–î)
        _, schedule_id, trainer_id, place_id, discipline_id = callback.data.split(":")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        trainer_data = await execute_raw_sql(
            f"SELECT name FROM public.trainer WHERE id = {trainer_id};"
        )
        trainer_name = trainer_data[0]['name'] if trainer_data else f"–¢—Ä–µ–Ω–µ—Ä #{trainer_id}"

        # –ü–æ–ª—É—á–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        moscow_tz = pytz.timezone('Europe/Moscow')
        now_moscow = datetime.now(moscow_tz)
        current_date = now_moscow.date()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule_data = await execute_raw_sql(
            f"SELECT time_start FROM public.schedule WHERE id = {schedule_id};"
        )

        if not schedule_data:
            await callback.answer("–û—à–∏–±–∫–∞: —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        visit_time = schedule_data[0]['time_start']
        visit_datetime = datetime.combine(current_date, visit_time).astimezone(moscow_tz)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        place_data = await execute_raw_sql(
            f"SELECT name FROM public.training_place WHERE id = {place_id};"
        )
        place_name = place_data[0]['name'] if place_data else f"–ú–µ—Å—Ç–æ #{place_id}"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–µ—â–µ–Ω–∏—è
        success_count = 0
        skipped_count = 0
        errors = []

        for student_id in selected_students.keys():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                existing = await execute_raw_sql(
                    f"SELECT id FROM public.visit "
                    f"WHERE student = {student_id} "
                    f"AND shedule = {schedule_id} "
                    f"AND DATE(data) = '{current_date}';"
                )

                if existing:
                    skipped_count += 1
                    continue

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å place_id
                await execute_raw_sql(
                    f"INSERT INTO public.visit ("
                    f"data, trainer, student, place, sport_discipline, shedule"
                    f") VALUES ("
                    f"'{visit_datetime.isoformat()}', "
                    f"{trainer_id}, "
                    f"{student_id}, "
                    f"{place_id}, "  # –ò—Å–ø–æ–ª—å–∑—É–µ–º place_id
                    f"{discipline_id}, "
                    f"{schedule_id}"
                    f");"
                )
                success_count += 1
            except Exception as e:
                errors.append(f"–°—Ç—É–¥–µ–Ω—Ç {student_id}: {str(e)}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—Ç–∞
        report_lines = [
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:",
            f"üìÖ –î–∞—Ç–∞: {current_date.strftime('%d.%m.%Y')}",
            f"‚è± –í—Ä–µ–º—è: {visit_time.strftime('%H:%M')}",
            f"üè¢ –ú–µ—Å—Ç–æ: {place_name}",
            f"‚úÖ –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏: {success_count}",
            f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–µ–π: {skipped_count}",
            f"‚ùå –û—à–∏–±–∫–∏: {len(errors)}",
            "üë• –°–ø–∏—Å–æ–∫:"
        ]
        report_lines.extend(f"‚Ä¢ {name}" for name in selected_students.values())

        if errors:
            report_lines.append("\n–û—à–∏–±–∫–∏:")
            report_lines.extend(errors[:3])

        await callback.message.answer("\n".join(report_lines))
        selected_students.clear()
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer()

    except Exception as e:
        await callback.answer("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!", show_alert=True)
        print(f"Error in confirm_attendance: {str(e)}")