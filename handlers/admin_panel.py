from aiogram import F, Router
from aiogram.types import Message
from aiogram.utils.chat_action import ChatActionSender
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from create_bot import bot
from db_handler.db_funk import get_user_permissions, process_payment, execute_raw_sql
from keyboards.kbs import home_page_kb, admin_page_kb

admin_router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
class PaymentStates(StatesGroup):
    waiting_for_payment_data = State()


@admin_router.message(F.text.endswith('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å'))
async def get_profile(message: Message):
    async with ChatActionSender.typing(bot=bot, chat_id=message.from_user.id):
        admin_text = "—Ç—É—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞"
    await message.answer(admin_text, reply_markup=await admin_page_kb(message.from_user.id))


@admin_router.message(F.text.contains('üí≥ –æ–ø–ª–∞—Ç–∞'))
async def start_payment_process(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_permissions = await get_user_permissions(message.from_user.id)

    if user_permissions != 99:  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await message.answer(
        "üí≥ –ü—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–§–ò–û –°—É–º–º–∞</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<code>–ê–Ω–æ—Å–æ–≤–∞ –ö–∏—Ä–∞ 3800</code>\n\n"
        "–ò–ª–∏:\n"
        "<code>–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä 5000</code>",
        reply_markup=await home_page_kb(message.from_user.id)
    )
    await state.set_state(PaymentStates.waiting_for_payment_data)


@admin_router.message(PaymentStates.waiting_for_payment_data)
async def process_payment_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–ª–∞—Ç–µ"""
    try:
        input_text = message.text.strip()

        # –†–∞–∑–±–∏—Ä–∞–µ–º –≤–≤–æ–¥ - –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —ç—Ç–æ —Å—É–º–º–∞, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –§–ò–û
        parts = input_text.split()
        if len(parts) < 2:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: <code>–ê–Ω–æ—Å–æ–≤–∞ –ö–∏—Ä–∞ 3800</code>")
            return

        # –°—É–º–º–∞ - –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
        amount_str = parts[-1]
        # –§–ò–û - –≤—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
        student_name = ' '.join(parts[:-1])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—É–º–º–∞ - —á–∏—Å–ª–æ
        try:
            amount = int(amount_str)
        except ValueError:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: <code>–ê–Ω–æ—Å–æ–≤–∞ –ö–∏—Ä–∞ 3800</code>")
            return

        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∏—â–µ–º –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        possible_students = await execute_raw_sql(
            f"""SELECT id, name 
            FROM public.student 
            WHERE active = true 
            AND name ILIKE $1
            LIMIT 5;""",
            f"%{student_name}%"
        )

        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –ø–æ–∫–∞–∂–µ–º –∏—Ö
        if len(possible_students) > 1:
            students_list = "\n".join([f"‚Ä¢ {s['name']}" for s in possible_students])
            await message.answer(
                f"üîç –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{student_name}':\n\n"
                f"{students_list}\n\n"
                f"–£—Ç–æ—á–Ω–∏—Ç–µ –§–ò–û —É—á–µ–Ω–∏–∫–∞:",
                reply_markup=await home_page_kb(message.from_user.id)
            )
            return
        elif len(possible_students) == 0:
            await message.answer(
                f"‚ùå –£—á–µ–Ω–∏–∫ '{student_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –§–ò–û.",
                reply_markup=await home_page_kb(message.from_user.id)
            )
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
        result = await process_payment(student_name, amount)

        if result["success"]:
            response_text = (
                f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!\n\n"
                f"üë§ –£—á–µ–Ω–∏–∫: <b>{result['student_name']}</b>\n"
                f"üí≥ –°—É–º–º–∞: <b>{result['amount']} —Ä—É–±.</b>\n"
                f"üéØ –¢–∞—Ä–∏—Ñ: <b>{result['price_description']}</b>\n"
                f"üì¶ –ó–∞–Ω—è—Ç–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ: <b>{result['classes_added']}</b>\n"
                f"üìä –û—Å—Ç–∞—Ç–æ–∫ –∑–∞–Ω—è—Ç–∏–π: <b>{result['new_balance']}</b>\n"
                f"{result['price_change_info']}\n"
                f"üìÖ –î–∞—Ç–∞: <b>{result['payment_date']}</b>"
            )
        else:
            response_text = f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"

        await message.answer(response_text)
        await state.clear()

    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()