#!/usr/bin/env python3
"""
–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –≤—ã—á–∏—Ç–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ cron –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00

## –û—Ç–∫—Ä—ã—Ç—å crontab –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
crontab -e

# –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É (–∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00)
0 23 * * * /app/judo_fastAPI/handlers/daily_attendance.py

# –ò–ª–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
0 23 * * * /app/judo_fastAPI/handlers/daily_attendance.py >> /var/log/daily_attendance_cron.log 2>&1
chmod +x /app/judo_fastAPI/handlers/daily_attendance.py
–ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫
python3 /app/judo_fastAPI/handlers/daily_attendance.py

# –ò–ª–∏ —á–µ—Ä–µ–∑ cron –≤—Ä—É—á–Ω—É—é (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
/app/judo_fastAPI/handlers/daily_attendance.py
–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
tail -f /var/log/daily_attendance.log

# –ü—Ä–æ–≤–µ—Ä–∫–∞ cron –ª–æ–≥–æ–≤
grep CRON /var/log/syslog

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
grep "–û–ë–ù–û–í–õ–ï–ù–û" /var/log/daily_attendance.log
"""
#!/usr/bin/env python3
"""
–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –≤—ã—á–∏—Ç–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ cron –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ PYTHONPATH
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏
try:
    from database.schemas import schema
    import asyncpg
    import logging
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config
    from config import settings
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print(f"üìÅ –¢–µ–∫—É—â–∏–π PYTHONPATH: {sys.path}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/daily_attendance.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger('daily_attendance')

async def execute_raw_sql(query: str, *params):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤ (–∞–Ω–∞–ª–æ–≥ –∏–∑ db_funk)"""
    try:
        conn = await asyncpg.connect(**settings.db.pg_link)
        try:
            if params:
                result = await conn.fetch(query, *params)
            else:
                result = await conn.fetch(query)
            return result
        except Exception as e:
            logger.error(f"Database error in query: {str(e)}")
            raise
        finally:
            await conn.close()
    except Exception as e:
        logger.error(f"Connection error: {str(e)}")
        raise

async def subtract_classes_for_todays_attendance():
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π —É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –ø—Ä–∏–π—Ç–∏ —Å–µ–≥–æ–¥–Ω—è.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        weekdays_ru = {
            0: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            1: '–≤—Ç–æ—Ä–Ω–∏–∫', 
            2: '—Å—Ä–µ–¥–∞',
            3: '—á–µ—Ç–≤–µ—Ä–≥',
            4: '–ø—è—Ç–Ω–∏—Ü–∞',
            5: '—Å—É–±–±–æ—Ç–∞',
            6: '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }
        
        today = datetime.now()
        today_weekday_ru = weekdays_ru[today.weekday()]
        today_date = today.date()
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –≤—ã—á–∏—Ç–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –∑–∞ {today_date} ({today_weekday_ru})")
        
        # 1. –ù–∞—Ö–æ–¥–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        schedules = await execute_raw_sql(
            f"SELECT id, day_week, time_start, time_end FROM {schema}.schedule WHERE day_week = $1;",
            today_weekday_ru
        )
        
        if not schedules:
            logger.info(f"‚ÑπÔ∏è –ù–∞ {today_weekday_ru} –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π")
            return {"success": True, "message": "–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "updated": 0}
        
        schedule_ids = [s['id'] for s in schedules]
        logger.info(f"üìÖ –ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {len(schedule_ids)}")
        
        # 2. –ù–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ —ç—Ç–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º
        if schedule_ids:
            placeholders = ','.join([f'${i+1}' for i in range(len(schedule_ids))])
            student_schedules = await execute_raw_sql(
                f"""SELECT ss.student, ss.schedule, s.name, s.classes_remaining
                FROM {schema}.student_schedule ss
                JOIN {schema}.student s ON ss.student = s.id
                WHERE ss.schedule IN ({placeholders})
                AND s.active = true
                AND s.classes_remaining > 0;""",
                *schedule_ids
            )
        else:
            student_schedules = []
        
        if not student_schedules:
            logger.info("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –∑–∞–Ω—è—Ç–∏—è–º–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            return {"success": True, "message": "–ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "updated": 0}
        
        student_ids = list(set([ss['student'] for ss in student_schedules]))
        logger.info(f"üë• –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {len(student_ids)}")
        
        # 3. –í—ã—á–∏—Ç–∞–µ–º –ø–æ 1 –∑–∞–Ω—è—Ç–∏—é —É –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
        updated_count = 0
        errors = []
        updated_students = []
        
        for student_schedule in student_schedules:
            student_id = student_schedule['student']
            try:
                result = await execute_raw_sql(
                    f"""UPDATE {schema}.student 
                    SET classes_remaining = classes_remaining - 1 
                    WHERE id = $1 
                    AND active = true 
                    AND classes_remaining > 0
                    RETURNING id, name, classes_remaining;""",
                    student_id
                )
                
                if result:
                    updated_count += 1
                    student = result[0]
                    updated_students.append({
                        'id': student['id'],
                        'name': student['name'],
                        'remaining': student['classes_remaining']
                    })
                    logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {student['name']} (ID: {student['id']}) - –æ—Å—Ç–∞–ª–æ—Å—å: {student['classes_remaining']}")
                else:
                    errors.append(f"–°—Ç—É–¥–µ–Ω—Ç {student_id}: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ, 0 –∑–∞–Ω—è—Ç–∏–π)")
                    logger.warning(f"‚ö†Ô∏è –ù–µ –æ–±–Ω–æ–≤–ª–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç {student_id}: 0 –∑–∞–Ω—è—Ç–∏–π")
                    
            except Exception as e:
                errors.append(f"–°—Ç—É–¥–µ–Ω—Ç {student_id}: {str(e)}")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_id}: {str(e)}")
        
        # 4. –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥
        message = f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}/{len(student_ids)} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
        if errors:
            message += f", ‚ùå –æ—à–∏–±–æ–∫: {len(errors)}"
        
        logger.info(f"üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {message}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        if updated_students:
            logger.info("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:")
            for student in updated_students:
                logger.info(f"   üëâ {student['name']} (ID: {student['id']}) - –æ—Å—Ç–∞–ª–æ—Å—å {student['remaining']} –∑–∞–Ω—è—Ç–∏–π")
        
        return {
            "success": True,
            "message": message,
            "updated": updated_count,
            "total_students": len(student_ids),
            "errors": errors,
            "date": today_date.isoformat(),
            "weekday": today_weekday_ru
        }
        
    except Exception as e:
        error_msg = f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg)
        return {
            "success": False,
            "message": error_msg,
            "updated": 0,
            "errors": [str(e)]
        }

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ cron"""
    try:
        logger.info("=" * 50)
        logger.info("üèÅ –ù–ê–ß–ê–õ–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø –°–ö–†–ò–ü–¢–ê")
        
        result = await subtract_classes_for_todays_attendance()
        
        logger.info(f"üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢: {result['message']}")
        logger.info("=" * 50)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è cron
        sys.exit(0 if result['success'] else 1)
        
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)

if __name__ == '__main__':
    asyncio.run(main())