#!/usr/bin/env python3
"""
–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –≤—ã—á–∏—Ç–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ cron –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00

## –û—Ç–∫—Ä—ã—Ç—å crontab –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
crontab -e

# –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É (–∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00)
0 23 * * * /app/judo_fastAPI/handlers/daily_attendance.py

# –ò–ª–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
0 23 * * * /app/judo_fastAPI/handlers/daily_attendance.py >> /var/log/daily_attendance_cron.log 2>&1
chmod +x /app/judo_fastAPI/handlers/daily_attendance.py
–ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫
python3 /app/judo_fastAPI/handlers/daily_attendance.py

# –ò–ª–∏ —á–µ—Ä–µ–∑ cron –≤—Ä—É—á–Ω—É—é (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
/app/judo_fastAPI/handlers/daily_attendance.py
–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
tail -f /var/log/daily_attendance.log

# –ü—Ä–æ–≤–µ—Ä–∫–∞ cron –ª–æ–≥–æ–≤
grep CRON /var/log/syslog

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
grep "–û–ë–ù–û–í–õ–ï–ù–û" /var/log/daily_attendance.log
"""
#!/usr/bin/env python3
"""
–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –≤—ã—á–∏—Ç–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è –∏ —Ä–∞—Å—á–µ—Ç –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ cron –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta
from math import ceil

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ PYTHONPATH
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

try:
    from database.schemas import schema
    import asyncpg
    import logging
    from config import settings
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/daily_attendance.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger('daily_attendance')

async def execute_raw_sql(query: str, *params):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        conn = await asyncpg.connect(**settings.db.pg_link)
        try:
            if params:
                result = await conn.fetch(query, *params)
            else:
                result = await conn.fetch(query)
            return result
        finally:
            await conn.close()
    except Exception as e:
        logger.error(f"Database error: {str(e)}")
        raise

async def calculate_next_payment_date(student_id: int, current_balance: int, days_per_week: int) -> datetime:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ:
    - —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∑–∞–Ω—è—Ç–∏–π
    - –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é
    - —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    """
    try:
        today = datetime.now().date()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        schedule_data = await execute_raw_sql(
            f"""SELECT DISTINCT sched.day_week 
            FROM {schema}.student_schedule ss
            JOIN {schema}.schedule sched ON ss.schedule = sched.id
            WHERE ss.student = $1""",
            student_id
        )
        
        if not schedule_data:
            logger.warning(f"‚ö†Ô∏è –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ ID {student_id} –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            return today + timedelta(days=30)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_days = [row['day_week'] for row in schedule_data]
        actual_days_per_week = len(student_days)
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ
        if days_per_week != actual_days_per_week:
            logger.info(f"üìù –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_id}: {days_per_week} -> {actual_days_per_week}")
            days_per_week = actual_days_per_week
        
        if days_per_week == 0:
            return today + timedelta(days=30)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å —Ö–≤–∞—Ç–∏—Ç —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        weeks_remaining = ceil(current_balance / days_per_week)
        
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∞—Ç—ã
        weekdays_ru_to_int = {
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0,
            '–≤—Ç–æ—Ä–Ω–∏–∫': 1,
            '—Å—Ä–µ–¥–∞': 2,
            '—á–µ—Ç–≤–µ—Ä–≥': 3,
            '–ø—è—Ç–Ω–∏—Ü–∞': 4,
            '—Å—É–±–±–æ—Ç–∞': 5,
            '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6
        }
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –≤ —á–∏—Å–ª–æ–≤—ã–µ
        student_weekdays = [weekdays_ru_to_int[day] for day in student_days]
        student_weekdays.sort()
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–Ω—å –ø–æ—Å–ª–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ
        today_weekday = today.weekday()
        next_training_day = None
        
        for day in student_weekdays:
            if day > today_weekday:
                next_training_day = day
                break
        
        # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–Ω—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ
        if next_training_day is None:
            next_training_day = student_weekdays[0]
            days_until_next = 7 - today_weekday + next_training_day
        else:
            days_until_next = next_training_day - today_weekday
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è
        last_training_date = today + timedelta(days=days_until_next + (weeks_remaining - 1) * 7)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä –≤ 3 –¥–Ω—è –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –æ–ø–ª–∞—Ç—ã
        payment_date = last_training_date + timedelta(days=3)
        
        logger.debug(f"üìÖ –°—Ç—É–¥–µ–Ω—Ç {student_id}: –±–∞–ª–∞–Ω—Å {current_balance}, –¥–Ω–µ–π/–Ω–µ–¥–µ–ª—é {days_per_week}, –æ–ø–ª–∞—Ç–∞ {payment_date}")
        
        return payment_date
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–∞—Ç—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_id}: {str(e)}")
        return datetime.now().date() + timedelta(days=30)

async def subtract_classes_and_update_payment_dates():
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è:
    1. –í—ã—á–∏—Ç–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π —É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    2. –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        weekdays_ru = {
            0: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            1: '–≤—Ç–æ—Ä–Ω–∏–∫', 
            2: '—Å—Ä–µ–¥–∞',
            3: '—á–µ—Ç–≤–µ—Ä–≥',
            4: '–ø—è—Ç–Ω–∏—Ü–∞', 
            5: '—Å—É–±–±–æ—Ç–∞',
            6: '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }
        
        today = datetime.now()
        today_weekday_ru = weekdays_ru[today.weekday()]
        today_date = today.date()
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –≤—ã—á–∏—Ç–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –∑–∞ {today_date} ({today_weekday_ru})")
        
        # –®–ê–ì 1: –í—ã—á–∏—Ç–∞–µ–º –∑–∞–Ω—è—Ç–∏—è —É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        result = await execute_raw_sql(
            f"""UPDATE {schema}.student 
            SET classes_remaining = classes_remaining - 1 
            WHERE id IN (
                SELECT DISTINCT ss.student
                FROM {schema}.student_schedule ss
                JOIN {schema}.schedule sched ON ss.schedule = sched.id
                JOIN {schema}.student s ON ss.student = s.id
                WHERE sched.day_week = $1
                AND s.active = true
                AND s.classes_remaining > 0
            )
            AND active = true
            AND classes_remaining > 0
            RETURNING id, name, classes_remaining;""",
            today_weekday_ru
        )
        
        updated_count = len(result)
        
        if updated_count == 0:
            logger.info(f"‚ÑπÔ∏è –ù–∞ {today_weekday_ru} –Ω–µ –±—ã–ª–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è")
            return {
                "success": True, 
                "message": "–ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è", 
                "updated": 0,
                "payment_dates_updated": 0,
                "date": today_date.isoformat(),
                "weekday": today_weekday_ru
            }
        
        logger.info(f"‚úÖ –°–ø–∏—Å–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–π —É {updated_count} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        
        # –®–ê–ì 2: –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        payment_updates = 0
        all_active_students = await execute_raw_sql(
            f"""SELECT s.id, s.name, s.classes_remaining, COUNT(DISTINCT ss.schedule) as training_days_per_week
            FROM {schema}.student s
            LEFT JOIN {schema}.student_schedule ss ON s.id = ss.student
            WHERE s.active = true
            GROUP BY s.id, s.name, s.classes_remaining
            HAVING COUNT(DISTINCT ss.schedule) > 0"""
        )
        
        for student in all_active_students:
            try:
                next_payment_date = await calculate_next_payment_date(
                    student['id'], 
                    student['classes_remaining'],
                    student['training_days_per_week']
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã –≤ –±–∞–∑–µ
                await execute_raw_sql(
                    f"UPDATE {schema}.student SET expected_payment_date = $1 WHERE id = $2",
                    next_payment_date, student['id']
                )
                
                payment_updates += 1
                logger.debug(f"üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è {student['name']}: {next_payment_date}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è {student['name']}: {str(e)}")
        
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–∞—Ç –æ–ø–ª–∞—Ç—ã: {payment_updates} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        
        # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ —Å–ø–∏—Å–∞–Ω–∏—è–º
        logger.info("üìä –û—Ç—á–µ—Ç –ø–æ —Å–ø–∏—Å–∞–Ω–∏—è–º:")
        for student in result[:5]:
            logger.info(f"   üëâ {student['name']} - –æ—Å—Ç–∞–ª–æ—Å—å {student['classes_remaining']} –∑–∞–Ω—è—Ç–∏–π")
        if updated_count > 5:
            logger.info(f"   ... –∏ –µ—â–µ {updated_count - 5} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        
        return {
            "success": True,
            "message": f"‚úÖ –°–ø–∏—Å–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–π —É {updated_count} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {payment_updates} –¥–∞—Ç –æ–ø–ª–∞—Ç—ã",
            "updated": updated_count,
            "payment_dates_updated": payment_updates,
            "date": today_date.isoformat(),
            "weekday": today_weekday_ru
        }
        
    except Exception as e:
        error_msg = f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg)
        return {
            "success": False,
            "message": error_msg,
            "updated": 0,
            "payment_dates_updated": 0,
            "errors": [str(e)]
        }

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ cron"""
    try:
        logger.info("=" * 50)
        logger.info("üèÅ –ù–ê–ß–ê–õ–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø –°–ö–†–ò–ü–¢–ê")
        
        result = await subtract_classes_and_update_payment_dates()
        
        logger.info(f"üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢: {result['message']}")
        logger.info("=" * 50)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è cron
        sys.exit(0 if result['success'] else 1)
        
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)

if __name__ == '__main__':
    asyncio.run(main())